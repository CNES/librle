#
# uncrustify config file for DVB Team
#

###############################################################################
# General options
###############################################################################

# The type of line endings
newlines                = lf     # auto/lf/crlf/cr

# The original size of tabs in the input
input_tab_size          = 8        # number

# Force the output encoding to UTF-8
utf8_force              = true    # false/true


###############################################################################
# Indenting
###############################################################################

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs to brace level, align with spaces
# 2=indent and align with tabs, using spaces when not on a tabstop
indent_with_tabs	= 1		# 1=indent to level only, 2=indent with tabs

# How to indent goto labels
#  >0 : absolute column where 1 is the leftmost column
#  <=0 : subtract from brace indent
indent_label		= 1		# pos: absolute col, neg: relative column

# Whether to use tabs for aligning
align_with_tabs		= false

# Whether to bump out to the next tab when aligning
align_on_tabstop	= false

# align_keep_tabs		= true
align_enum_equ_span	= 4		# '=' in enum definition
align_struct_init_span	= 0		# align stuff in a structure init '= { }'
# The span for aligning comments that end lines (0=don't align)
align_right_cmt_span	= 0

# Align variable definitions in prototypes and functions
align_func_params       = false    # false/true

# The span for aligning struct/union (0=don't align)
align_var_struct_span = 0


###############################################################################
# Newline adding and removing options
###############################################################################

nl_enum_brace		= remove	# "enum {" vs "enum \n {"
nl_union_brace		= remove	# "union {" vs "union \n {"
nl_struct_brace		= remove	# "struct {" vs "struct \n {"
nl_do_brace 		= remove	# "do {" vs "do \n {"
nl_if_brace 		= remove	# "if () {" vs "if () \n {"
nl_for_brace 		= remove	# "for () {" vs "for () \n {"
nl_else_brace 		= remove	# "else {" vs "else \n {"
nl_while_brace 		= remove	# "while () {" vs "while () \n {"
nl_switch_brace 	= remove	# "switch () {" vs "switch () \n {"
nl_brace_while		= remove	# "} while" vs "} \n while" - cuddle while
nl_brace_else		= remove	# "} else" vs "} \n else" - cuddle else
# The number of blank lines after a block of variable definitions at the top of a function body
# 0 = No change (default)
nl_func_var_def_blk	= 1
nl_fcall_brace		= remove	# "list_for_each() {" vs "list_for_each()\n{"
nl_fdef_brace		= add		# "int foo() {" vs "int foo()\n{"
# Add or remove newline between a function name and the opening '('
nl_func_paren = remove
# Add or remove newline after '(' in a function declaration
nl_func_decl_start = remove
# Add or remove newline between '()' in a function declaration.
nl_func_decl_empty = remove
# Add or remove newline after each ',' in a function declaration
nl_func_decl_args = ignore
# Add or remove newline after each ',' in a function definition
nl_func_def_args = remove # ignore/add/remove/force
# Add or remove newline before the ')' in a function declaration
nl_func_decl_end = remove
# Add or remove newlines at the start of the file
nl_start_of_file   = remove
# Add or remove newline at the end of the file
nl_end_of_file     = force
# The number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force')
nl_end_of_file_min = 1
# The number of newlines between a function def and the function comment.
# 0 = No change.
nl_comment_func_def = 1
# Whether to remove blank lines after '{'
eat_blanks_after_open_brace   = true
# Whether to remove blank lines before '}'
eat_blanks_before_close_brace = true

###############################################################################
# Spacing options
###############################################################################
sp_brace_else		= force         # Add or remove space between '}' and 'else' if on the same line
sp_else_brace		= force         # Add or remove space between 'else' and '{' if on the same line
sp_return_paren		= force		# "return (1);" vs "return(1);"
sp_sizeof_paren		= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen	= force		# "if (" vs "if("
sp_after_sparen		= force		# "if () {" vs "if (){"
sp_after_cast		= remove	# "(int) a" vs "(int)a"
sp_inside_braces	= force		# "{ 1 }" vs "{1}"
sp_inside_braces_struct	= force	# "{ 1 }" vs "{1}"
sp_inside_braces_enum	= force	# "{ 1 }" vs "{1}"
# Add or remove space around assignment operator '=', '+=', etc
sp_assign		= force
# Add or remove space around arithmetic operator '+', '-', '/', '*', etc
sp_arith		= force
# Add or remove space around boolean operators '&&' and '||'
sp_bool			= force
# Add or remove space around compare operator '<', '>', '==', etc
sp_compare		= force
# Add or remove space after ','
sp_after_comma		= force
sp_func_def_paren	= remove	# "int foo (){" vs "int foo(){"
sp_func_call_paren	= remove	# "foo (" vs "foo("
sp_func_proto_paren	= remove	# "int foo ();" vs "int foo();"
# Add or remove space inside '(' and ')'
sp_inside_paren = remove
# Add or remove space inside a non-empty '[' and ']'
sp_inside_square = remove
# Add or remove spaces inside cast parens
sp_inside_paren_cast = remove
# Add or remove space inside function '(' and ')'
sp_inside_fparen = remove
# Add or remove space inside if-condition '(' and ')'
sp_inside_sparen = remove
# Add or remove space between nested parens
sp_paren_paren = remove
# Add or remove space before pointer star '*'
sp_before_ptr_star = force
# Add or remove space after pointer star '*', if followed by a word.
sp_after_ptr_star = remove
# Add or remove space after a pointer star '*', if followed by a func proto/def.
sp_after_ptr_star_func                   = add   # ignore/add/remove/force
# Add or remove space between pointer stars '*'
sp_between_ptr_star = remove


###############################################################################
# Code modifying options (non-whitespace)
###############################################################################

mod_paren_on_return	= ignore	# "return 1;" vs "return (1);"
mod_full_brace_if	= add	# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_if_chain	= false
mod_full_brace_for	= add	# "for () a--;" vs "for () { a--; }"
mod_full_brace_do	= add	# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while	= add	# "while (a) a--;" vs "while (a) { a--; }"
mod_full_brace_nl	= 3		# don't remove if more than 3 newlines


###############################################################################
# Comment modifications
###############################################################################

# Whether to put a star on subsequent comment lines
cmt_star_cont = true

###############################################################################
# Preprocessor options
###############################################################################

# Control indent of preprocessors inside #if blocks at brace level 0
pp_indent = remove

###############################################################################
# Line Splitting options
###############################################################################

# Try to limit code width to N number of columns
code_width                               = 100        # number

# Whether to fully split long 'for' statements at semi-colons
ls_for_split_full                        = true    # false/true

# Whether to fully split long function protos/calls at eatch commas
ls_func_split_full                       = true    # false/true

